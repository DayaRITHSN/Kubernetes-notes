Config file in kubernetes
       In Kubernetes, a config file (short for configuration file) is a YAML or JSON file that describes the desired state of a Kubernetes object, such as a Deployment,
       Service, or Pod.
       The config file specifies the object's properties, such as the number of replicas, the container image to use, the container ports to expose, the volume mounts 
       to use, and other configuration options.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
METADATA - In Kubernetes, metadata is information that describes a Kubernetes object, such as a Deployment, Service, Pod, or ConfigMap. Metadata is defined in 
           the object's YAML or JSON configuration file and provides important details about the object, such as its name, namespace, labels, annotations, and creation 
           timestamp.
           Here are some examples of the metadata fields commonly used in Kubernetes objects:
      •	name: The name of the object.
      •	namespace: The Kubernetes namespace the object belongs to.
      •	labels: Key-value pairs that can be used to organize and select objects.
      •	annotations: Key-value pairs that can be used to attach additional metadata to an object.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
MaxSurge - is the maximum number of pods that can be created above the desired number of replicas during a rolling update. For example, if the desired number of 
           replicas is 3, and MaxSurge is set to 2, then during a rolling update, up to 5 pods can be created.

MinSurge - is the minimum number of pods that must be running while the rolling update is in progress. This ensures that there are always enough pods available 
           to handle incoming requests during the update process. For example, if the desired number of replicas is 3, and MinSurge is set to 1, then during a 
           rolling update, at least 4 pods will be running at any given time.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------           
Rollback - is a feature of Kubernetes that allows you to revert a Deployment to a previous revision. If a new version of your application causes issues, you can use 
           the rollback feature to quickly and easily undo the changes and revert to a previous working version.
           The rollback feature is available via the kubectl command-line tool or through the Kubernetes API.
           command $ kubectl rollout undo deployment/<deployment-name> [--to-revision=<revision-number>]
           
Rollout -  In Kubernetes, a rollout is the process of updating an application or service to a new version, while minimizing downtime and ensuring that the new version 
           is working properly. 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------           
Kubernetes Controllers are used to manage the state of resources in the cluste

ReplicaSet - A ReplicaSet ensures that a specified number of replicas of a Pod are running at any given time. 
            It replaces the deprecated ReplicationController.
Deployment - A Deployment is used to manage the rollout and scaling of ReplicaSets, making it easy to update and 
            roll back to previous versions.
StatefulSet - A StatefulSet is used to manage stateful applications that require unique identities and persistent storage.
ReplicaSet vs Replication controller
	    - Both ensures that at a given point of time the specified number of replicas are always running.
	    - Replication controller is very old controller now it is replaced by ReplicaSet.
	    - The only difference between them is Replication controller supports only equality-based selector but ReplicaSet support both set-based and equality based 
             selector.
DaemonSet - DaemonSet creates exactly one pod on each and every worker node in the cluster and ensures that all that are always running.
          - If a new worker node is added or deleted, DaemonSet will also add or delete the pod from the respective worker node.
Job : A Job creates one or more Pods and ensures that they run to completion, typically for batch processing or
     data processing tasks.
CronJob : A CronJob creates Jobs on a schedule, typically for running periodic tasks such as backups or data synchronization.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
In Kubernetes, scaling up and scaling down refer to increasing or decreasing the number of replicas of a deployment, statefulset, or replica set that are 
               running in the cluster. Replicas are identical copies of a Pod that run the same application and are managed by the controller.
Scaling up   - is the process of increasing the number of replicas, which can be useful when there is an increase in traffic or when more resources are required 
               to handle the workload. For example, if a deployment is currently running two replicas of a Pod and the traffic increases, scaling up to four 
               replicas may help to handle the increased load.
Scaling down - is the process of decreasing the number of replicas, which can be useful when there is a decrease in traffic or when fewer resources are required
               to handle the workload. For example, if a deployment is currently running four replicas of a Pod and the traffic decreases, scaling down to 
               two replicas may help to conserve resources and reduce costs.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Zero downtime - Ability to Deploy new versions of an application or update it without interrupting the service to end-users. 
                It means that the deployment process is done seamlessly and without any noticeable effect on the user experience.
                In Kubernetes, this is achieved by using rolling updates, which means deploying new versions of an application in a controlled manner. 
                Kubernetes creates new pods with the updated version of the application and gradually replaces the old ones    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
StatefulSet  - statefulset is the workload API object used to manage stateful applications. Manages the deployment and scaling of a set of Pods,
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
DNS SYNTAX   - Kubernetes creates DNS records for Services and Pods. You can contact Services with consistent DNS names instead of IP addresses. 
               Kubernetes publishes information about Pods and Services which is used to program DNS. Kubelet configures Pods' DNS so that running 
               containers can lookup Services by name rather than IP.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------               
Statefull Applications - User session data is saved at the server side.
	                - if server goes down, it is difficult to transfer the session data to other server. 
	                - This type of application will not work, if we want to implement autoscaling.	
Stateless Applications
	                - user session-data is never saved at the server side.
	                - using a common authentication gateway / client token method to validate the users once for multiple microservices. 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------                       
Types of Kubernetes Services

ClusterIP (default) - This is the default type of service in k8S.
		      - using ClusterIP we can expose the IPs of pods to another set of pods with in the cluster.
NodePort -  This service is most primitive way to get the external traffic directed to our applications running inside the cluster in pods.
         -  Automatically a ClusterIP will also be created internally.
LoadBalancer - A load balancer in Kubernetes is a component that distributes incoming network traffic across multiple replicas of a service.          
ExternalName - Internal clients use the DNS name of a Service as an alias for an external DNS name.
Headless  - In Kubernetes, a headless service is a type of service that does not have an automatically assigned IP address or a load balancer.
          - If we don't need the default loadbalancing capability of services nor the single IP to service we use StatefullSet 
	   - using Headless service we can get all the target pod ips, if we do nslookup.
	   - It is created by sepcifying 'none' for ClusterIP
	   - Headless service is usually used with StatefullSet controller. 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Autoscaling - It is a feature in which the cluster is capable of increasing the number of nodes as the demand for service response increases and 
              decrease the number of nodes as the requirement decreases.
Types of AutoScaling	      
Horizontal autoscaling - scales the number of pod replicas based on CPU utilization or custom metrics. When a metric exceeds a certain threshold.
Vertical autoscaling - adjusts the CPU and memory requests and limits for containers based on their actual usage.
Cluster Autoscaling -  is a Kubernetes component that automatically adjusts the size of a cluster based on the current demand and resource utilization.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
CrashLoopBackOff - is a state that can occur when a Kubernetes container repeatedly crashes after starting up. When a container crashes, Kubernetes will try to 
                   restart it automatically, but if the container continues to fail, it will enter a CrashLoopBackOff state.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Monolothic and Microservice architecture 
Monolothic architecture - A monolothic application has a single code base with multiple modules in it.
		        - It is a single build for entire application.
		        - To make minor changes to application, we need to re-build and re-deploy the complete application.
		        - scaling is very challenging.
Microservice architecture - A microservice application is composed of small (micro) services. 
		          - Each service will have a different code base.
		          - Application are divided into as small as possible sub applications called services which are independent to each other which are 
			     called loosely coupled.	
		          - Each service can be managed separately and it is deployable separately.
		- Services need not to share same technology stack or frameworks.
